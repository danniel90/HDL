%decls %{
#include <string>
#include <vector>
#include <map>
#include <bitset>

using namespace std;

class vectorExpr;
class vectorId;

class vectorBool;
class TruthTableElem;
class TruthTable;

class vectorMetaType;
class mapTipo;

static mapTipo *TablaTipos;

%}

%decls %end %{

class vectorExpr
{
public:
	vector<Expr*> *exprs;
	
	vectorExpr(){ exprs = new vector<Expr*>(); }
	~vectorExpr() { delete exprs; }
};

class vectorId
{
public:
	vector<string> *ids;
	
	vectorId() { ids = new vector<string>(); }
	~vectorId() { delete ids; }
};

class vectorBool
{
public:
	vector<bool> *bools;
	vectorBool() { bools = new vector<bool>(); }
	~vectorBool() { delete bools; }
};

class TruthTableElem
{
public:
	vectorBool *in;
	vectorBool *out;
	
	TruthTableElem() { in = new vectorBool(); out = new vectorBool(); }
	TruthTableElem(vectorBool *pin, vectorBool *pout) { in = pin; out = pout; }
	~TruthTableElem() { delete in; delete out; }
};

class TruthTable
{
public:
	vector<TruthTableElem*> *row;
	TruthTable() { row = new vector<TruthTableElem*>(); }
	~TruthTable() { delete row; }
};

class vectorMetaType{
public:
	vector<MetaType*> *metatypes;
	vectorMetaType() { metatypes = new vector<MetaType*>(); }
	~vectorMetaType() { delete metatypes; }
};

class mapTipo{
public:
	map<string, Tipo*> *tabla_tipos;
	mapTipo() { tabla_tipos = new map<string, Tipo*>(); }
	~mapTipo() { delete tabla_tipos; }
};

%}

%{
#include <iostream>
#include "hdl_tree.h"

using namespace std;

%}

%option lang="C++"

/*--------------------------------------------------------------------------------------
					TIPOS
--------------------------------------------------------------------------------------*/

%node Tipo %abstract %typedef = {
	int size;
}

%node Output Tipo
%node Input Tipo
%node Temp Tipo


%node ArrayTipo Tipo = {
	Tipo *tipo;
	int upper;
	int lower;
}

%node SetTipo Tipo = {
	Tipo *tipo;
}

//tipo retorno es INPUT
%node FunctionTipo Tipo = {
	Tipo *tipo;//tipo y tam de retorno
	vectorId *vectorParams;//tam de tipo base
	vectorId *vectorReturn;
}

/*--------------------------------------------------------------------------------------
					METATIPOS
--------------------------------------------------------------------------------------*/

%node MetaType %abstract %typedef = {
	string lexeme;
	Tipo *tipo;
}

%node IdMetaType MetaType

%node ArrayMetaType MetaType = {
	int upper;
	int lower;
}

//%node FunctionMetaType MetaType = {
//}

//--------------------getTipo()--------------------

%operation %virtual Tipo *getTipo(MetaType *this)

getTipo(IdMetaType){
	return tipo;
}

getTipo(ArrayMetaType){
	return new ArrayTipo(upper - lower, tipo, upper, lower);
}

/*--------------------------------------------------------------------------------------
					PROGRAMA
--------------------------------------------------------------------------------------*/
%node Program %typedef = {
	string moduleName;
	mapTipo *mapa;
	Statement *functionDeclaration;
	Statement *main;
}



/*--------------------------------------------------------------------------------------
					SENTENCIAS
--------------------------------------------------------------------------------------*/

/*%node Sentence %abstract %typedef

%node SequenceSntnce Sentence = {
	Sentence *sntnce1;
	Sentence *sntnce2;
}

%node FunctionSntnce Sentence = {
	string Id;
	vectorId *params;
	vectorId *returns;
	Statement *body;
}

//--------------------validarSemantica()--------------------
//%operation %virtual void validarSemantica(Sentence *this)



/*--------------------------------------------------------------------------------------
					STATEMENT
--------------------------------------------------------------------------------------*/

%node Statement %abstract %typedef

%node SequenceStmnt Statement = {
	Statement *stmnt1;
	Statement *stmnt2;
}

%node FunctionStmnt Statement = {
	string Id;
	vectorId *params;
	vectorId *returns;
	Statement *body;
}

%node AssignStmnt Statement = {
	Expr *lvalue;
	Expr *rvalue;
}


%node WhenStmnt Statement = {
	Expr *cond;
	Statement *stmnt1;
	Statement *stmnt2;
}

%node TruthTableStmnt Statement = {
	TruthTable *table;
}

//--------------------interpret()--------------------

/*%operation %virtual void interpret(Statement *this)

interpret(StatementSeq) {
	if (stmnt1 != NULL)
		stmnt1->interpret();
	if (stmnt2 != NULL)
		stmnt2->interpret();
}

interpret(AssignStmnt){
	//nada
}

interpret(WhenStmnt){
	int val = cond->eval();
	if (val > 0){
		if (stmnt1 != NULL)
			stmnt1->interpret();
	} else {
		if (stmnt2 != NULL)
			stmnt2->interpret();
	}
}

interpret(TruthTableStmnt){
	
}*/

/*--------------------------------------------------------------------------------------
					Expresiones
--------------------------------------------------------------------------------------*/
%node Expr %abstract %typedef

%node BinaryExpr Expr %abstract = {
	Expr *exprLeft;
	Expr *exprRight;
}

%node GreaterExpr BinaryExpr
%node GreaterEqualExpr BinaryExpr
%node LessExpr BinaryExpr
%node LessEqualExpr BinaryExpr
%node EqualExpr BinaryExpr
%node NotEqualExpr BinaryExpr

%node ShiftLeftExpr BinaryExpr
%node ShiftRightExpr BinaryExpr

%node AndExpr BinaryExpr
%node OrExpr BinaryExpr
%node XorExpr BinaryExpr
%node XnorExpr BinaryExpr

%node AddExpr BinaryExpr
%node SubExpr BinaryExpr
%node MultExpr BinaryExpr
%node DivExpr BinaryExpr
%node ModExpr BinaryExpr

%node UnaryExpr Expr %abstract = {
	Expr *expr;
}

%node NegateExpr UnaryExpr
%node NotExpr UnaryExpr

%node NumExpr Expr = {
	long value;
	int size;
}


%node ReferenceAccess Expr %abstract %typedef = {
	string lexeme;
}


%node IdExpr ReferenceAccess

%node ArrayIndexExpr IdExpr = {
	int index;
}

%node ArraySubSetExpr ArrayIndexExpr = {
	int index2;
}

%node SetExpr Expr = {
	vectorExpr *vector;
}

%node FuncCallExpr ReferenceAccess = {
	vectorExpr *vector;
}

//--------------------validarSemantico()--------------------
%operation %virtual Tipo *validarSemantico(Expr *this)

validarSemantico(GreaterExpr),
validarSemantico(GreaterEqualExpr),
validarSemantico(LessExpr),
validarSemantico(LessEqualExpr),
validarSemantico(EqualExpr),
validarSemantico(NotEqualExpr),

validarSemantico(ShiftLeftExpr),
validarSemantico(ShiftRightExpr),

validarSemantico(AndExpr),
validarSemantico(OrExpr),
validarSemantico(XorExpr),
validarSemantico(XnorExpr),

validarSemantico(AddExpr),
validarSemantico(SubExpr),
validarSemantico(MultExpr),
validarSemantico(DivExpr),
validarSemantico(ModExpr) {
	Tipo *t1 = exprLeft->validarSemantico();
	Tipo *t2 = exprRight->validarSemantico();
	
	if (t1->size != t2->size)
		cerr << "Sizes incompatibles en la expresion!!" << endl << endl;

	if ((t1->getKind() != Input_kind) || (t2->getKind() != Input_kind))
		cerr << "Operando deberia ser de tipo Input!!" << endl << endl;

	return t1;
}

validarSemantico(NotExpr){
	return expr->validarSemantico();
}

validarSemantico(NegateExpr){
	return expr->validarSemantico();
}

validarSemantico(NumExpr){
	return new Input(size);
}

validarSemantico(FuncCallExpr){
	if (TablaTipos->tabla_tipos->count(lexeme) == 0)
		cerr << "No existe la funcion: " << lexeme << endl << endl;

	Tipo *t = TablaTipos->tabla_tipos->find(lexeme)->second;

	FunctionTipo *tfunc;
	tfunc = reinterpret_cast<FunctionTipo*>(t);

	if (tfunc == NULL)
		cerr << "Error en dynamic_cast!!" << endl << endl;
	
	if (tfunc->size != vector->exprs->size())
		cerr << "Cantidad de parametros incorrecta!!" << endl << endl;

	for (int x = 0; x < vector->exprs->size(); x++){
		Tipo *tmp = vector->exprs->at(x)->validarSemantico();
		if (tmp->getKind() != Input_kind)
			cerr << "Parametros deberian ser de tipo Input!!" << endl << endl;
	}
	
	return tfunc->tipo;
}

validarSemantico(IdExpr){
	if (TablaTipos->tabla_tipos->count(lexeme) == 0)
		cerr << "No existe la variable: " << lexeme << endl << endl;

	return TablaTipos->tabla_tipos->find(lexeme)->second;
}

validarSemantico(ArrayIndexExpr)
{
	if (TablaTipos->tabla_tipos->count(lexeme) == 0)
		cerr << "No existe la variable: " << lexeme << endl << endl;

	Tipo *t = TablaTipos->tabla_tipos->find(lexeme)->second;

	if (t->getKind() != ArrayTipo_kind)
		cerr << "Tipo incorrecto de arreglo!!" << endl << endl;

	ArrayTipo *arr = reinterpret_cast<ArrayTipo*>(t);

	if (index > arr->upper)
		cerr << "Indice por encima del limite superior de arreglo!!" << endl << endl;

	if (index < arr->lower)
		cerr << "Indice por debajo del limite inferior de arreglo!!" << endl << endl;

	return t;
}

validarSemantico(ArraySubSetExpr)
{
	if (TablaTipos->tabla_tipos->count(lexeme) == 0)
		cerr << "No existe la variable: " << lexeme << endl << endl;

	Tipo *t = TablaTipos->tabla_tipos->find(lexeme)->second;

	if (t->getKind() != ArrayTipo_kind)
		cerr << "Tipo incorrecto de arreglo!!" << endl << endl;

	ArrayTipo *arr = reinterpret_cast<ArrayTipo*>(t);

	if ((index - index2) > arr->size)
		cerr << "ArraySubSet mas grande que el arreglo!!" << endl << endl;

	if (index > arr->upper)
		cerr << "Indice upper por encima del limite superior soportado!!" << endl << endl;

	if (index2 < arr->lower)
		cerr << "Indice lower por debajo del limite inferior soportado!!" << endl << endl;

	return t;
}

validarSemantico(SetExpr){
	Tipo *t0 = vector->exprs->at(0)->validarSemantico();
	
	for (int x = 1; x < vector->exprs->size(); x++){
		Tipo *t1 = vector->exprs->at(x)->validarSemantico();
		if (t0->getKind() != t1->getKind() )
			cerr << "Tipos de Conjunto son distintos!!!" << endl << endl;
	}
	return  t0;
}


//--------------------eval()--------------------
/*
%operation %virtual long eval(Expr *this)

eval(GreaterExpr),
eval(GreaterEqualExpr),
eval(LessExpr),
eval(LessEqualExpr),
eval(EqualExpr),
eval(NotEqualExpr),

eval(ShiftLeftExpr),
eval(ShiftRightExpr),

eval(AndExpr),
eval(OrExpr),
eval(XorExpr),
eval(XnorExpr),

eval(AddExpr),
eval(SubExpr),
eval(MultExpr),
eval(DivExpr),
eval(ModExpr) {
	long v1 = exprLeft->eval();
	long v2 = exprRight->eval();
	
        switch (getKind()) {
		case GreaterExpr_kind:		return v1 > v2;
		case GreaterEqualExpr_kind:	return v1 >= v2;
		case LessExpr_kind:		return v1 < v2;
		case LessEqualExpr_kind:	return v1 <= v2;
		case EqualExpr_kind:		return v1 == v2;
		case NotEqualExpr_kind:		return v1 != v2;

		case ShiftLeftExpr_kind:	return v1 << v2;
		case ShiftRightExpr_kind:	return v1 >> v2;

		case AndExpr_kind:		return v1 & v2;
		case OrExpr_kind:		return v1 | v2;
		case XorExpr_kind:		return v1 ^ v2;
		case XnorExpr_kind:		return !(v1 ^ v2);

		case AddExpr_kind:		return v1 + v2;
		case SubExpr_kind:		return v1 - v2;
		case MultExpr_kind:		return v1 * v2;
		case DivExpr_kind:		return v1 / v2;
		case ModExpr_kind:		return v1 % v2;
		
		default:			break;
        }
	return 0;
}

eval(NegateExpr),
eval(NotExpr) {
	long v = expr->eval();
	
	switch (getKind()) {
		case NegateExpr_kind:		return -v;
		case NotExpr_kind:		return !v;
	}
}

eval(NumExpr) {
	return value;
}

eval(IdExpr) {
	return 1;//tmp
}

eval(FuncCallExpr) {
	/*
	cout << "funcCall exprs: " << endl;
	for(int x = 0; x < expressions->vector_exprs->size(); x++)
		cout << expressions->vector_exprs->at(x)->eval() << endl;
	*/
	//return 1;//tmp
//}
/*
eval(ArrayIndexExpr) {
//	cout << "refIndex: " << index << endl;
	return 1;//tmp
}

eval(ArraySubSetExpr) {
	return 1;//tmp
}

eval(SetExpr) {
	return 1;//tmp
}*/
