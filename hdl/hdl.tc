%decls %{
#include <cstdlib>
#include <string>
#include <vector>
#include <map>
#include <math.h>

#include <boost/dynamic_bitset.hpp>

using namespace std;
//tmp

class Expr;
typedef vector<Expr*> vectorExpr;

typedef vector<string> vectorId;
typedef vector<bool> vectorBool;

class MetaType;
typedef vector<MetaType*> vectorMetaType;

class Tipo;
typedef map<string, Tipo*> mapTipo;

typedef boost::dynamic_bitset<> BitSet;
typedef vector<BitSet*> vectorBitSet;
typedef map<string, BitSet*> mapBitSet;

class FuncionValor;
typedef map<string, FuncionValor*> mapFuncion;

extern mapTipo *TablaTipos;
extern mapBitSet *TablaValores;
extern mapFuncion *TablaFunciones;

%}

%{
#include <iostream>
#include "hdl_tree.h"

using namespace std;

BitSet *globalVal;

%}

%option lang="C++"

/*--------------------------------------------------------------------------------------
					TIPOS
--------------------------------------------------------------------------------------*/

%node Tipo %abstract %typedef = {
	int size;
}

%node Output Tipo
%node Input Tipo
%node Temp Tipo


%node ArrayTipo Tipo = {
	Tipo *tipo;
	int upper;
	int lower;
}

%node SetTipo Tipo = {
	Tipo *tipo;
}

//tipo retorno es INPUT
%node FunctionTipo Tipo = {
	Tipo *tipo;//tipo y tam de retorno
	vectorId *vectorParams;//tam de tipo base
	vectorId *vectorReturn;
}

/*--------------------------------------------------------------------------------------
					METATIPOS
--------------------------------------------------------------------------------------*/

%node MetaType %abstract %typedef = {
	string lexeme;
	Tipo *tipo;
}

%node IdMetaType MetaType

%node ArrayMetaType MetaType = {
	int upper;
	int lower;
}

//--------------------getTipo()--------------------

%operation %virtual Tipo *getTipo(MetaType *this)

getTipo(IdMetaType){
	return tipo;
}

getTipo(ArrayMetaType){
	int tam = (upper - lower) + 1;
	return new ArrayTipo(tam, tipo, upper, lower);
}

/*--------------------------------------------------------------------------------------
					PROGRAMA
--------------------------------------------------------------------------------------*/
%node Program %typedef = {
	string moduleName;
	Statement *variableDeclaration;
	Statement *functionDeclaration;
	Statement *main;
}

%operation %virtual void Semantica(Program *this)

Semantica(Program){
	
	variableDeclaration->validarSemantica();
	cout << "validacion semantica de variables DONE" << endl;

	if (functionDeclaration != NULL)
		functionDeclaration->validarSemantica();
	cout << "validacion semantica de funciones DONE" << endl;

	if (main == NULL){
		cerr << "Falta funcion main del programa!!" << endl << endl;
		exit(1);
	}
	main->validarSemantica();
	cout << "validacion semantica del main DONE" << endl;
}

%node FuncionValor %abstract %typedef

%node FuncionValorTT FuncionValor = {
	BitSet *input;
	BitSet *output;
	TruthTable *tt;
}

%node FuncionValorST FuncionValor = {
	vectorId *input;
	vectorId *output;
	Statement *stmnts;
	mapBitSet *valores;
}

%operation %virtual BitSet* evalFunction(FuncionValor *this)

evalFunction(FuncionValorTT){
	unsigned long linput = input->to_ulong();

	unsigned long loutput = 0;
	for (int x = 0; x < input->size(); x++){
		if (linput == tt->input->at(x)->to_ulong()){
			output = tt->output->at(x);
			break;
		}
	}
	return output;
}

evalFunction(FuncionValorST){
	mapBitSet *old = TablaValores;
	TablaValores = valores;

	//stmnts->interpret();

	BitSet *res = new BitSet();
	for (int x = 0; x > output->size(); x++){
		BitSet *val = TablaValores->find(output->at(x))->second;
		res->append(val->to_ulong());
	}
	TablaValores = old;
	return res;
}

/*--------------------------------------------------------------------------------------
					STATEMENT
--------------------------------------------------------------------------------------*/

%node Statement %abstract %typedef

%node SequenceStmnt Statement = {
	Statement *stmnt1;
	Statement *stmnt2;
}

%node VariableDeclarationStmnt Statement = {
	vectorMetaType *metatipos;
}

%node FunctionStmnt Statement %abstract = {
	string Id;
	vectorId *params;
	vectorId *returns;
}

%node FunctionStmntTT FunctionStmnt = {
	TruthTable *ttable;
}

%node FunctionStmntST FunctionStmnt = {
	Statement *stmnts;
	mapTipo *tipos;
}

%node AssignStmnt Statement = {
	Expr *lvalue;
	Expr *rvalue;
}


%node WhenStmnt Statement = {
	Expr *cond;
	Statement *true_block;
	Statement *false_block;
}

/*--------------------------------------------------------------------------------------
				TRUTH_TABLE
--------------------------------------------------------------------------------------*/

%node TruthTable %typedef = {
	vectorBitSet *input;
	vectorBitSet *output;
}

%node TruthTableElem %typedef = {
	BitSet *input;
	BitSet *output;
}

//--------------------validarSemantica()--------------------

%operation %virtual void validarSemantica(Statement *this)

validarSemantica(SequenceStmnt){
//cout << "Entrando a validacion SEQ" << endl;
	if (stmnt1 != NULL)
		stmnt1->validarSemantica();
	if (stmnt2 != NULL)
		stmnt2->validarSemantica();
//cout << "Saliendo de validacion SEQ" << endl;
}

validarSemantica(VariableDeclarationStmnt){
	for (int x = 0; x < metatipos->size(); x++){
		MetaType *mt = metatipos->at(x);
		if (TablaTipos->count(mt->lexeme) > 0){
			cerr << "Variable " << mt->lexeme << " ya existe!!" << endl << endl;
			exit(1);
		}
		TablaTipos->insert(pair<string, Tipo*>(mt->lexeme, mt->getTipo()));
												
//		TablaValores->insert(pair<string, BitSet*>(mt->lexeme, new BitSet(mt->getTipo()->size, 0)));
	}
}

validarSemantica(FunctionStmntST){
	FunctionTipo *tFunc = new FunctionTipo(params->size(), new Input(returns->size()), params, returns);

	if (TablaTipos->count(Id) > 0){
		cerr << "Funcion " << Id << " ya existe!!" << endl << endl;
		exit(1);
	}
	mapTipo *old = TablaTipos;
	TablaTipos = new map<string, Tipo*>();

	for (int x = 0; x < params->size(); x++){
		string id = params->at(x);
		if (TablaTipos->count(id) > 0){
			cerr << "Variable " << id << " ya existe!!" << endl << endl;
			exit(1);
		}
		TablaTipos->insert(pair<string, Tipo*>(id,new Input(1)));
	}

	for (int x = 0; x < returns->size(); x++){
		string id = returns->at(x);
		if (TablaTipos->count(id) > 0){
			cerr << "Variable " << id << " ya existe!!" << endl << endl;
			exit(1);
		}
		TablaTipos->insert(pair<string, Tipo*>(id,new Output(1)));
	}
	tipos = TablaTipos;
	TablaTipos = old;
	TablaTipos->insert(pair<string, Tipo*>(Id, tFunc));

	TablaTipos = tipos;
	stmnts->validarSemantica();
	TablaTipos = old;
}

validarSemantica(FunctionStmntTT){
	FunctionTipo *tFunc = new FunctionTipo(params->size(), new Input(returns->size()), params, returns);
	if (TablaTipos->count(Id) > 0){
		cerr << "Funcion " << Id << " ya existe!!" << endl << endl;
		exit(1);
	}
	TablaTipos->insert(pair<string, Tipo*>(Id, tFunc));

	FuncionValorTT *fVal = new FuncionValorTT(new BitSet(params->size(), 0), new BitSet(returns->size(), 0), ttable);
	TablaFunciones->insert(pair<string, FuncionValor*>(Id, fVal));



	long inCount = ttable->input->at(0)->size();
	long paramCount = params->size();
	if (inCount != paramCount){
		cerr << "Cantidad de variables de entrada incorrecta!! tabla:" << inCount << " params:" << paramCount << endl << endl;
		exit(1);
	}
	long outCount = ttable->output->at(0)->size();
	long retCount = returns->size();
	if (outCount != retCount){
		cerr << "Cantidad de variables de salida incorrecta!! tabla:" << outCount << " returns:" << retCount << endl << endl;
		exit(1);
	}
	long s = params->size();
	long filas = s*s;
	if (ttable->input->size() != filas){
		cerr << "Cantidad de filas incorrecta en thruth_table!! filas: " << filas << endl << endl;
		exit(1);
	}
}

validarSemantica(AssignStmnt){
//cout << "Entrando a validacion ASSIGN" << endl;
	Tipo *tlvalue = lvalue->validarSemantico();
//cout << "lvalue Semantica DONE" << endl;
	Tipo *trvalue = rvalue->validarSemantico(); 
//cout << "rvalue Semantica DONE" << endl;

	if (tlvalue->size != trvalue->size){
		cerr << "Size de conjuntos distinto!! lval: " << tlvalue->size << " rvalue: " << trvalue->size << endl << endl;
		exit(1);
	}
	if (tlvalue->getKind() == Input_kind){
		cerr << "Conjuntos del lado izquierdo de la asignacion deben ser de tipo Output!!" << endl << endl;
		exit(1);
	}
	if (trvalue->getKind() == Output_kind){
		cerr << "Conjuntos del lado derecho de la asignacion deben ser de tipo Input!!" << endl << endl;
		exit(1);
	}
//cout << "Saliendo de validacion ASSIGN" << endl;
}

validarSemantica(WhenStmnt){
	Tipo *tcond = cond->validarSemantico();

	true_block->validarSemantica();

	if (false_block != NULL)
		false_block->validarSemantica();
}

//--------------------interpret()--------------------

%operation %virtual void interpret(Statement *this)

interpret(SequenceStmnt){

}

interpret(VariableDeclarationStmnt){
	for (int x = 0; x < metatipos->size(); x++){
		MetaType *mt = metatipos->at(x);
		TablaValores->insert(pair<string, BitSet*>(mt->lexeme, new BitSet(mt->getTipo()->size, 0)));
	}
}

interpret(FunctionStmntST){
	mapBitSet *tablaValoresFN = new mapBitSet();

	for (int x = 0; x < params->size(); x++){
		string id = params->at(x);
		tablaValoresFN->insert(pair<string, BitSet*>(id, new BitSet(1, 0)));
	}
	for (int x = 0; x < returns->size(); x++){
		string id = returns->at(x);
		tablaValoresFN->insert(pair<string, BitSet*>(id, new BitSet(1, 0)));
	}
 	FuncionValorST *fVal = new FuncionValorST(params, returns, stmnts,tablaValoresFN);

	TablaFunciones->insert(pair<string, FuncionValor*>(Id, fVal));
}

interpret(FunctionStmntTT){
	FuncionValorTT *fVal = new FuncionValorTT(new BitSet(params->size(), 0), new BitSet(returns->size(), 0), ttable);
	TablaFunciones->insert(pair<string, FuncionValor*>(Id, fVal));
}

interpret(AssignStmnt){

}

interpret(WhenStmnt){

}

/*--------------------------------------------------------------------------------------
					Expresiones
--------------------------------------------------------------------------------------*/
%node Expr %abstract %typedef

%node BinaryExpr Expr %abstract = {
	Expr *exprLeft;
	Expr *exprRight;
}

%node GreaterExpr BinaryExpr
%node GreaterEqualExpr BinaryExpr
%node LessExpr BinaryExpr
%node LessEqualExpr BinaryExpr
%node EqualExpr BinaryExpr
%node NotEqualExpr BinaryExpr

%node ShiftLeftExpr BinaryExpr
%node ShiftRightExpr BinaryExpr

%node AndExpr BinaryExpr
%node OrExpr BinaryExpr
%node XorExpr BinaryExpr
%node XnorExpr BinaryExpr

%node AddExpr BinaryExpr
%node SubExpr BinaryExpr
%node MultExpr BinaryExpr
%node DivExpr BinaryExpr
%node ModExpr BinaryExpr

%node UnaryExpr Expr %abstract = {
	Expr *expr;
}

%node NegateExpr UnaryExpr
%node NotExpr UnaryExpr

%node NumExpr Expr = {
	long value;
	int size;
	BitSet *bs;
}

%node LValues Expr %abstract %typedef

%node ReferenceAccess LValues %abstract %typedef = {
	string lexeme;
}


%node IdExpr ReferenceAccess

%node ArrayIndexExpr IdExpr = {
	int index;
}

%node ArraySubSetExpr ArrayIndexExpr = {
	int index2;
}

%node SetExpr LValues = {
	vectorExpr *exprs;
}

%node FuncCallExpr Expr %typedef = {
	string lexeme;
	vectorExpr *exprs;
}

%operation %virtual void SetElem(LValues *this)

SetElem(IdExpr){
	TablaValores->insert(pair<string, BitSet*>(lexeme, globalVal));
}

SetElem(ArrayIndexExpr){
	TablaValores->insert(pair<string, BitSet*>(lexeme, new BitSet(1,globalVal[index].to_ulong())));
}

SetElem(SetExpr){
	BitSet *old = globalVal;

	for (int x = 0; x < exprs->size(); x++){
		//------------------------
	}
}

//--------------------validarSemantico()--------------------
%operation %virtual Tipo *validarSemantico(Expr *this)

validarSemantico(GreaterExpr),
validarSemantico(GreaterEqualExpr),
validarSemantico(LessExpr),
validarSemantico(LessEqualExpr),
validarSemantico(EqualExpr),
validarSemantico(NotEqualExpr),

validarSemantico(ShiftLeftExpr),
validarSemantico(ShiftRightExpr),

validarSemantico(AndExpr),
validarSemantico(OrExpr),
validarSemantico(XorExpr),
validarSemantico(XnorExpr),

validarSemantico(AddExpr),
validarSemantico(SubExpr),
validarSemantico(MultExpr),
validarSemantico(DivExpr),
validarSemantico(ModExpr) {
	Tipo *t1 = exprLeft->validarSemantico();
	Tipo *t2 = exprRight->validarSemantico();
	
	if (t1->size != t2->size){
		cerr << "Sizes incompatibles en la expresion!! t1: " << t1->size << " t2: " << t2->size << endl << endl;
		exit(1);
	}
	if ((t1->getKind() != Input_kind) || (t2->getKind() != Input_kind)){
		cerr << "Operando deberia ser de tipo Input!! tk1: " << t1->getKind() << " tk2:" << t2->getKind() << endl << endl;
		exit(1);
	}
	return t1;
}

validarSemantico(NotExpr){
	return expr->validarSemantico();
}

validarSemantico(NegateExpr){
	return expr->validarSemantico();
}

validarSemantico(NumExpr){
	return new Input(size);
}

validarSemantico(FuncCallExpr){
//cout << "Entrando a validacion FUNCCALL" << endl;
	if (TablaTipos->count(lexeme) == 0){
		cerr << "No existe la funcion: " << lexeme << endl << endl;
		exit(1);
	}
	Tipo *t = TablaTipos->find(lexeme)->second;

	if (t->getKind() != FunctionTipo_kind){
		cerr << "El id no es de tipo funcion: " << lexeme << endl << endl;
		exit(1);
	}
	FunctionTipo *tfunc;
	tfunc = reinterpret_cast<FunctionTipo*>(t);

	if (tfunc == NULL){
		cerr << "Error en dynamic_cast!!" << endl << endl;
			exit(1);
	}
	if (tfunc->size != exprs->size()){
		cerr << "Cantidad de parametros incorrecta!!" << endl << endl;
		exit(1);
	}
	for (int x = 0; x < exprs->size(); x++){
		Tipo *tmp = exprs->at(x)->validarSemantico();
		if (tmp->getKind() == Output_kind){
			cerr << "Parametros deberian ser de tipo Input o Temp!! tmpk: " << tmp->getKind() << endl << endl;
		exit(1);
	}
	}
	
	return tfunc->tipo;
//cout << "Saliendo de validacion FUNCCALL" << endl;
}

validarSemantico(IdExpr){
//cout << "Entrando a validarSemantico de ID" << endl;

	if (TablaTipos->count(lexeme) == 0){
		cerr << "No existe la variable: " << lexeme << endl << endl;
		exit(1);
	}

	Tipo *t = TablaTipos->find(lexeme)->second;

//cout << "Saliendo de validarSemantico de ID" << endl;	
	if (t->getKind() == ArrayTipo_kind){
		ArrayTipo *arr = reinterpret_cast<ArrayTipo*>(t);

		switch(arr->tipo->getKind()){
			case Output_kind:	return new Output(arr->size);
			case Input_kind:	return new Input(arr->size);
			default:		return new Temp(arr->size);
		}
	} else
		return t;
}

validarSemantico(ArrayIndexExpr)
{
	if (TablaTipos->count(lexeme) == 0){
		cerr << "No existe la variable: " << lexeme << endl << endl;
		exit(1);
	}
	Tipo *t = TablaTipos->find(lexeme)->second;

	if (t->getKind() != ArrayTipo_kind){
		cerr << "Tipo incorrecto de arreglo!!" << endl << endl;
		exit(1);
	}
	ArrayTipo *arr = reinterpret_cast<ArrayTipo*>(t);

	if (index > arr->upper){
		cerr << "Indice por encima del limite superior de arreglo!!" << endl << endl;
		exit(1);
	}
	if (index < arr->lower){
		cerr << "Indice por debajo del limite inferior de arreglo!!" << endl << endl;
		exit(1);
	}
	return arr->tipo;
}

validarSemantico(ArraySubSetExpr)
{
	if (TablaTipos->count(lexeme) == 0){
		cerr << "No existe la variable: " << lexeme << endl << endl;
		exit(1);
	}
	Tipo *t = TablaTipos->find(lexeme)->second;

	if (t->getKind() != ArrayTipo_kind){
		cerr << "Tipo incorrecto de arreglo!!" << endl << endl;
		exit(1);
	}
	ArrayTipo *arr = reinterpret_cast<ArrayTipo*>(t);

	if ((index - index2) > arr->size){
		cerr << "ArraySubSet mas grande que el arreglo!!" << endl << endl;
		exit(1);
	}
	if (index > arr->upper){
		cerr << "Indice upper por encima del limite superior soportado!!" << endl << endl;
		exit(1);
	}
	if (index2 < arr->lower){
		cerr << "Indice lower por debajo del limite inferior soportado!!" << endl << endl;
		exit(1);
	}
	switch(arr->tipo->getKind()){
		case Output_kind:	return new Output((index-index2)+1);
		case Input_kind:	return new Input((index-index2)+1);
		default:		return new Temp((index-index2)+1);
	}
}

validarSemantico(SetExpr){
	int size = 0;
	for (int x = 0; x < exprs->size(); x++){
		Tipo *t = exprs->at(x)->validarSemantico();
		size += t->size;
		if (t->getKind() == Input_kind){
			cerr << "Tipos de Conjunto deberia ser Output o Temp!!! tk: " << t->getKind() << endl << endl;
			exit(1);
		}
	}
	return  new Output(size);
}


//--------------------eval()--------------------

%operation %virtual BitSet* eval(Expr *this)

eval(GreaterExpr),
eval(GreaterEqualExpr),
eval(LessExpr),
eval(LessEqualExpr),
eval(EqualExpr),
eval(NotEqualExpr){
	BitSet *v1 = exprLeft->eval();
	BitSet *v2 = exprRight->eval();


        switch (getKind()) {
		case GreaterExpr_kind:		return new BitSet(v1->size(), (v1 > v2));
		case GreaterEqualExpr_kind:	return new BitSet(v1->size(), (v1 >= v2));
		case LessExpr_kind:		return new BitSet(v1->size(), (v1 < v2));
		case LessEqualExpr_kind:	return new BitSet(v1->size(), (v1 <= v2));
		case EqualExpr_kind:		return new BitSet(v1->size(), (v1 == v2));
		case NotEqualExpr_kind:		return new BitSet(v1->size(), (v1 != v2));
		default:			cerr << "Error Expresion en evaluacion Binaria!!" << endl << endl; exit(1);
	}
}

eval(ShiftLeftExpr),
eval(ShiftRightExpr){
	BitSet *v1 = exprLeft->eval();
	BitSet *v2 = exprRight->eval();
	

        switch (getKind()) {
		case ShiftLeftExpr_kind:	return new BitSet(v1->size() ,(*v1 << v2->to_ulong()).to_ulong());
		case ShiftRightExpr_kind:	return new BitSet(v1->size(), (*v1 >> v2->to_ulong()).to_ulong());
		default:			cerr << "Error Expresion en evaluacion Binaria!!" << endl << endl; exit(1);
	}
}

eval(AndExpr),
eval(OrExpr),
eval(XorExpr),
eval(XnorExpr){
	BitSet *v1 = exprLeft->eval();
	BitSet *v2 = exprRight->eval();
	

        switch (getKind()) {
		case AndExpr_kind:		return new BitSet(v1->size(), (*v1 & *v2).to_ulong());
		case OrExpr_kind:		return new BitSet(v1->size(), (*v1 | *v2).to_ulong());
		case XorExpr_kind:		return new BitSet(v1->size(), (*v1 ^ *v2).to_ulong());
		case XnorExpr_kind:		return new BitSet(v1->size(), !(*v1 ^ *v2).to_ulong());
		default:			cerr << "Error Expresion en evaluacion Binaria!!" << endl << endl; exit(1);
	}
}

eval(AddExpr),
eval(SubExpr),
eval(MultExpr),
eval(DivExpr),
eval(ModExpr) {
	BitSet *v1 = exprLeft->eval();
	BitSet *v2 = exprRight->eval();
	

        switch (getKind()) {
		case AddExpr_kind:		return new BitSet(v1->size(), (v1->to_ulong() + v2->to_ulong()));
		case SubExpr_kind:		return new BitSet(v1->size(), (v1->to_ulong() - v2->to_ulong()));
		case MultExpr_kind:		return new BitSet(v1->size(), (v1->to_ulong() * v2->to_ulong()));
		case DivExpr_kind:		return new BitSet(v1->size(), (v1->to_ulong() / v2->to_ulong()));
		case ModExpr_kind:		return new BitSet(v1->size(), (v1->to_ulong() % v2->to_ulong()));
		
		default:			cerr << "Error Expresion en evaluacion Binaria!!" << endl << endl; exit(1);
        }

}

eval(NegateExpr){
	BitSet *v = expr->eval();
	BitSet *res;// = new BitSet(v->size(),0);
	res = (v->flip()).to_ulong() + new BitSet(v->size(),1);
	//res->flip();
	return res;
}
eval(NotExpr) {
	BitSet *v = expr->eval();
	return new BitSet(v->size(),!v->to_ulong());
}

eval(NumExpr) {
	return bs;
}

eval(IdExpr) {
	return TablaValores->find(lexeme)->second;
}

eval(FuncCallExpr) {
	FuncionValor *fval = TablaFunciones->find(lexeme)->second;
	return fval->evalFunction();
}

eval(ArrayIndexExpr) {
	BitSet *res = TablaValores->find(lexeme)->second;
	return new BitSet(1, res[index].to_ulong());
}

eval(ArraySubSetExpr) {
	BitSet *res = new BitSet();
	BitSet *b = TablaValores->find(lexeme)->second;

	for (int x = index2; x >= index; x--){
		bool val = b->test(x);
		res->push_back(val);
	}
	return res;
}

eval(SetExpr) {
	BitSet *res = new BitSet();
	for (int x = 0; x < exprs->size(); x++){
		BitSet *exp = exprs->at(x)->eval();
		res->append(exp->to_ulong());
	}
	return res;
}
